{
	"info": {
		"_postman_id": "c76d2dd1-f97f-449e-b5ef-89754e81c2b6",
		"name": "enp-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41865364"
	},
	"item": [
		{
			"name": "/legacy/v2",
			"item": [
				{
					"name": "sms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const crypto = require('crypto-js');\r",
									"\r",
									"const USE_SERVICE = (pm.environment.get('enp-use-service-auth') || '').toLowerCase() === 'true';\r",
									"\r",
									"const ADMIN_SECRET_KEY = pm.environment.get('enp-admin-secret') || '';\r",
									"const ADMIN_ID = 'enp';\r",
									"\r",
									"const SERVICE_SECRET_KEY = pm.environment.get('service-api-key') || '';\r",
									"const SERVICE_ID = pm.environment.get('service-id') || '';\r",
									"\r",
									"const ALGORITHM = 'HS256';\r",
									"const ACCESS_TOKEN_EXPIRE_SECONDS = 15;\r",
									"\r",
									"function base64url(source) {\r",
									"    // Encode in classical base64\r",
									"    let encodedSource = crypto.enc.Base64.stringify(source);\r",
									"\r",
									"    // Remove padding equal characters\r",
									"    encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"    // Replace characters according to base64url specifications\r",
									"    encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"    encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"    return encodedSource;\r",
									"}\r",
									"\r",
									"function generateToken(issuer, sigKey) {\r",
									"    const header = {\r",
									"        typ: 'JWT',\r",
									"        alg: ALGORITHM,\r",
									"    };\r",
									"\r",
									"    const now = Math.floor(Date.now() / 1000);\r",
									"\r",
									"    const payload = {\r",
									"        iss: issuer,\r",
									"        iat: now,\r",
									"        exp: now + ACCESS_TOKEN_EXPIRE_SECONDS,\r",
									"    };\r",
									"\r",
									"    const stringifiedHeader = crypto.enc.Utf8.parse(JSON.stringify(header));\r",
									"    const encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"    const stringifiedPayload = crypto.enc.Utf8.parse(JSON.stringify(payload));\r",
									"    const encodedPayload = base64url(stringifiedPayload);\r",
									"\r",
									"    const token = encodedHeader + \".\" + encodedPayload;\r",
									"\r",
									"    const signature = crypto.HmacSHA256(token, sigKey);\r",
									"    const encodedSignature = base64url(signature);\r",
									"\r",
									"    return token + \".\" + encodedSignature;\r",
									"}\r",
									"\r",
									"// Choose credentials based on the toggle\r",
									"const token = USE_SERVICE\r",
									"    ? generateToken(SERVICE_ID, SERVICE_SECRET_KEY)\r",
									"    : generateToken(ADMIN_ID, ADMIN_SECRET_KEY);\r",
									"\r",
									"console.log('JWT Token:', token);\r",
									"pm.environment.set('jwt_signed', token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"billing_code\": \"12345\",\r\n    \"callback_url\": \"https://mock-notify.va.gov/\",\r\n    \"personalisation\": {\r\n        \"Test\": \"string\"\r\n    },\r\n    \"reference\": \"external-id\",\r\n    \"template_id\": \"{{sms-template-id}}\",\r\n    \"phone_number\": \"+18005550101\",\r\n    \"sms_sender_id\": \"4f44ffc8-1ff8-4832-b1af-0b615691b6ea\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{notification-api-url}}/legacy/v2/notifications/sms",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"legacy",
								"v2",
								"notifications",
								"sms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "enp base route",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notification-api-url}}/enp",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"enp"
					]
				}
			},
			"response": []
		},
		{
			"name": "enp get api notification",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const crypto = require('crypto-js');\r",
							"\r",
							"const ADMIN_SECRET_KEY = pm.environment.get('enp-admin-secret') || '';\r",
							"const ALGORITHM = 'HS256';\r",
							"const ACCESS_TOKEN_EXPIRE_SECONDS = 15;\r",
							"\r",
							"function base64url(source) {\r",
							"    // Encode in classical base64\r",
							"    let encodedSource = crypto.enc.Base64.stringify(source);\r",
							"\r",
							"    // Remove padding equal characters\r",
							"    encodedSource = encodedSource.replace(/=+$/, '');\r",
							"\r",
							"    // Replace characters according to base64url specifications\r",
							"    encodedSource = encodedSource.replace(/\\+/g, '-');\r",
							"    encodedSource = encodedSource.replace(/\\//g, '_');\r",
							"\r",
							"    return encodedSource;\r",
							"}\r",
							"\r",
							"function generateToken(sigKey = ADMIN_SECRET_KEY) {\r",
							"    const header = {\r",
							"        typ: 'JWT',\r",
							"        alg: ALGORITHM,\r",
							"    };\r",
							"\r",
							"    var payload = {\r",
							"        iss: 'enp',\r",
							"        iat: Math.floor(Date.now() / 1000),\r",
							"        exp: Math.floor(Date.now() / 1000) + ACCESS_TOKEN_EXPIRE_SECONDS,\r",
							"    };\r",
							"\r",
							"    const stringifiedHeader = crypto.enc.Utf8.parse(JSON.stringify(header));\r",
							"    const encodedHeader = base64url(stringifiedHeader);\r",
							"\r",
							"    const stringifiedPayload = crypto.enc.Utf8.parse(JSON.stringify(payload));\r",
							"    const encodedPayload = base64url(stringifiedPayload);\r",
							"\r",
							"    const token = encodedHeader + \".\" + encodedPayload;\r",
							"\r",
							"    const signature = crypto.HmacSHA256(token, sigKey);\r",
							"    const encodedSignature = base64url(signature);\r",
							"\r",
							"    return token + \".\" + encodedSignature;\r",
							"}\r",
							"\r",
							"const token = generateToken();\r",
							"console.log(token);\r",
							"pm.environment.set('jwt_signed', token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notification-api-url}}/legacy/notifications/{{notification-id}}",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"legacy",
						"notifications",
						"{{notification-id}}"
					],
					"query": [
						{
							"key": "enp",
							"value": "false"
						}
					]
				}
			},
			"response": []
		}
	]
}