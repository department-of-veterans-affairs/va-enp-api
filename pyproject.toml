[tool.poetry]
name = "va-enp-api"
version = "0.0.1"
description = ""
authors = ["VA Enterprise Notification Platform - VA Notify"]
license = "MIT"
readme = "README.md"
package-mode = false
requires-poetry = "2.1.3"

[tool.poetry.dependencies]
python = "^3.13"
aiobotocore = "*"
fastapi = {extras = ["standard"], version = "*"}
pyjwt = "*"
gunicorn = "*"
loguru = "*"
phonenumbers = "*"
psycopg = {extras = ["binary"], version = "*"}
pydantic = "*"
pydantic_extra_types = "*"
sqlalchemy = {extras = ["asyncio"], version = "*"}
starlette_context = "*"
tenacity = "*"
uvicorn-worker = "*"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
moto = {extras = ["server"], version = "*"}
pytest-cov = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-mock = "*"

[tool.poetry.group.static_tools]
optional = true

[tool.poetry.group.static_tools.dependencies]
flake8-docstrings-complete = "*"  # Needed to ensure Args are in the docstring
mypy = "*"
pre-commit = "*"
ruff = "*"
types-aiobotocore = {extras = ["essential"], version = "*"}

[tool.poetry.group.mkdocs]
optional = true

[tool.poetry.group.mkdocs.dependencies]
mkdocs = "*"
mkdocstrings = {extras = ["python"], version = "*"}
mkdocs-material = "*"
mkdocs-gen-files = "*"

[tool.bandit]
skips = ["B101"]  # https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html

[tool.coverage.run]
omit = [
    "app/logging/*",
    "app/main.py",
    "tests/app/test_main.py",
    "app/legacy/dao/*",  # Need to be able to add to the database before we can remove this
]

[tool.coverage.report]
fail_under = 100
precision = 2

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations",
]
line-length = 120
indent-width = 4
target-version = "py313"

[tool.ruff.format]
docstring-code-format = true  # https://docs.astral.sh/ruff/settings/#format-docstring-code-format
# docstring-code-line-length = "dynamic"  # https://docs.astral.sh/ruff/settings/#format-docstring-code-line-length
indent-style = "space"
line-ending = "auto"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
# Replace pydocstrings with pydoclint when it is ready: https://github.com/astral-sh/ruff/issues/12434
# D417 will not raise an error if there is no arg/param section: https://github.com/astral-sh/ruff/issues/2310
select = ["ANN", "ASYNC", "C901", "DOC", "D", "E4", "E7", "E9", "F", "G", "FAST", "I", "PLE", "PT", "RUF", "TID252", "W"]
ignore = ["D203", "D213"]
preview = true

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 5

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
# addopts = ["--cov=app", "--cov=tests", "--cov-report=term-missing", "-W", "error"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
